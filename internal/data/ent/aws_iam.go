// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/golifez/zkit/internal/data/ent/aws_iam"
)

// Aws_iam is the model entity for the Aws_iam schema.
type Aws_iam struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID string `json:"account_id,omitempty"`
	// IamName holds the value of the "iam_name" field.
	IamName string `json:"iam_name,omitempty"`
	// AccessKey holds the value of the "access_key" field.
	AccessKey string `json:"access_key,omitempty"`
	// SecretKey holds the value of the "secret_key" field.
	SecretKey string `json:"secret_key,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Aws_iam) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case aws_iam.FieldID:
			values[i] = new(sql.NullInt64)
		case aws_iam.FieldUID, aws_iam.FieldAccountID, aws_iam.FieldIamName, aws_iam.FieldAccessKey, aws_iam.FieldSecretKey:
			values[i] = new(sql.NullString)
		case aws_iam.FieldCreatedAt, aws_iam.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Aws_iam fields.
func (ai *Aws_iam) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case aws_iam.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ai.ID = int(value.Int64)
		case aws_iam.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				ai.UID = value.String
			}
		case aws_iam.FieldAccountID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				ai.AccountID = value.String
			}
		case aws_iam.FieldIamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field iam_name", values[i])
			} else if value.Valid {
				ai.IamName = value.String
			}
		case aws_iam.FieldAccessKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_key", values[i])
			} else if value.Valid {
				ai.AccessKey = value.String
			}
		case aws_iam.FieldSecretKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret_key", values[i])
			} else if value.Valid {
				ai.SecretKey = value.String
			}
		case aws_iam.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ai.CreatedAt = value.Time
			}
		case aws_iam.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ai.UpdatedAt = value.Time
			}
		default:
			ai.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Aws_iam.
// This includes values selected through modifiers, order, etc.
func (ai *Aws_iam) Value(name string) (ent.Value, error) {
	return ai.selectValues.Get(name)
}

// Update returns a builder for updating this Aws_iam.
// Note that you need to call Aws_iam.Unwrap() before calling this method if this Aws_iam
// was returned from a transaction, and the transaction was committed or rolled back.
func (ai *Aws_iam) Update() *AWSIamUpdateOne {
	return NewAWSIamClient(ai.config).UpdateOne(ai)
}

// Unwrap unwraps the Aws_iam entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ai *Aws_iam) Unwrap() *Aws_iam {
	_tx, ok := ai.config.driver.(*txDriver)
	if !ok {
		panic("ent: Aws_iam is not a transactional entity")
	}
	ai.config.driver = _tx.drv
	return ai
}

// String implements the fmt.Stringer.
func (ai *Aws_iam) String() string {
	var builder strings.Builder
	builder.WriteString("Aws_iam(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ai.ID))
	builder.WriteString("uid=")
	builder.WriteString(ai.UID)
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(ai.AccountID)
	builder.WriteString(", ")
	builder.WriteString("iam_name=")
	builder.WriteString(ai.IamName)
	builder.WriteString(", ")
	builder.WriteString("access_key=")
	builder.WriteString(ai.AccessKey)
	builder.WriteString(", ")
	builder.WriteString("secret_key=")
	builder.WriteString(ai.SecretKey)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ai.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ai.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Aws_iams is a parsable slice of Aws_iam.
type Aws_iams []*Aws_iam
