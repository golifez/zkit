// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/golifez/zkit/internal/data/ent/aws_iam"
	"github.com/golifez/zkit/internal/data/ent/predicate"
)

// AWSIamUpdate is the builder for updating Aws_iam entities.
type AWSIamUpdate struct {
	config
	hooks    []Hook
	mutation *AWSIamMutation
}

// Where appends a list predicates to the AWSIamUpdate builder.
func (aiu *AWSIamUpdate) Where(ps ...predicate.Aws_iam) *AWSIamUpdate {
	aiu.mutation.Where(ps...)
	return aiu
}

// SetUID sets the "uid" field.
func (aiu *AWSIamUpdate) SetUID(s string) *AWSIamUpdate {
	aiu.mutation.SetUID(s)
	return aiu
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (aiu *AWSIamUpdate) SetNillableUID(s *string) *AWSIamUpdate {
	if s != nil {
		aiu.SetUID(*s)
	}
	return aiu
}

// SetAccountID sets the "account_id" field.
func (aiu *AWSIamUpdate) SetAccountID(s string) *AWSIamUpdate {
	aiu.mutation.SetAccountID(s)
	return aiu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (aiu *AWSIamUpdate) SetNillableAccountID(s *string) *AWSIamUpdate {
	if s != nil {
		aiu.SetAccountID(*s)
	}
	return aiu
}

// SetIamName sets the "iam_name" field.
func (aiu *AWSIamUpdate) SetIamName(s string) *AWSIamUpdate {
	aiu.mutation.SetIamName(s)
	return aiu
}

// SetNillableIamName sets the "iam_name" field if the given value is not nil.
func (aiu *AWSIamUpdate) SetNillableIamName(s *string) *AWSIamUpdate {
	if s != nil {
		aiu.SetIamName(*s)
	}
	return aiu
}

// SetAccessKey sets the "access_key" field.
func (aiu *AWSIamUpdate) SetAccessKey(s string) *AWSIamUpdate {
	aiu.mutation.SetAccessKey(s)
	return aiu
}

// SetNillableAccessKey sets the "access_key" field if the given value is not nil.
func (aiu *AWSIamUpdate) SetNillableAccessKey(s *string) *AWSIamUpdate {
	if s != nil {
		aiu.SetAccessKey(*s)
	}
	return aiu
}

// SetSecretKey sets the "secret_key" field.
func (aiu *AWSIamUpdate) SetSecretKey(s string) *AWSIamUpdate {
	aiu.mutation.SetSecretKey(s)
	return aiu
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (aiu *AWSIamUpdate) SetNillableSecretKey(s *string) *AWSIamUpdate {
	if s != nil {
		aiu.SetSecretKey(*s)
	}
	return aiu
}

// SetCreatedAt sets the "created_at" field.
func (aiu *AWSIamUpdate) SetCreatedAt(t time.Time) *AWSIamUpdate {
	aiu.mutation.SetCreatedAt(t)
	return aiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aiu *AWSIamUpdate) SetNillableCreatedAt(t *time.Time) *AWSIamUpdate {
	if t != nil {
		aiu.SetCreatedAt(*t)
	}
	return aiu
}

// SetUpdatedAt sets the "updated_at" field.
func (aiu *AWSIamUpdate) SetUpdatedAt(t time.Time) *AWSIamUpdate {
	aiu.mutation.SetUpdatedAt(t)
	return aiu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aiu *AWSIamUpdate) SetNillableUpdatedAt(t *time.Time) *AWSIamUpdate {
	if t != nil {
		aiu.SetUpdatedAt(*t)
	}
	return aiu
}

// Mutation returns the AWSIamMutation object of the builder.
func (aiu *AWSIamUpdate) Mutation() *AWSIamMutation {
	return aiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aiu *AWSIamUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aiu.sqlSave, aiu.mutation, aiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiu *AWSIamUpdate) SaveX(ctx context.Context) int {
	affected, err := aiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aiu *AWSIamUpdate) Exec(ctx context.Context) error {
	_, err := aiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiu *AWSIamUpdate) ExecX(ctx context.Context) {
	if err := aiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aiu *AWSIamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(aws_iam.Table, aws_iam.Columns, sqlgraph.NewFieldSpec(aws_iam.FieldID, field.TypeInt))
	if ps := aiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiu.mutation.UID(); ok {
		_spec.SetField(aws_iam.FieldUID, field.TypeString, value)
	}
	if value, ok := aiu.mutation.AccountID(); ok {
		_spec.SetField(aws_iam.FieldAccountID, field.TypeString, value)
	}
	if value, ok := aiu.mutation.IamName(); ok {
		_spec.SetField(aws_iam.FieldIamName, field.TypeString, value)
	}
	if value, ok := aiu.mutation.AccessKey(); ok {
		_spec.SetField(aws_iam.FieldAccessKey, field.TypeString, value)
	}
	if value, ok := aiu.mutation.SecretKey(); ok {
		_spec.SetField(aws_iam.FieldSecretKey, field.TypeString, value)
	}
	if value, ok := aiu.mutation.CreatedAt(); ok {
		_spec.SetField(aws_iam.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := aiu.mutation.UpdatedAt(); ok {
		_spec.SetField(aws_iam.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{aws_iam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aiu.mutation.done = true
	return n, nil
}

// AWSIamUpdateOne is the builder for updating a single Aws_iam entity.
type AWSIamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AWSIamMutation
}

// SetUID sets the "uid" field.
func (aiuo *AWSIamUpdateOne) SetUID(s string) *AWSIamUpdateOne {
	aiuo.mutation.SetUID(s)
	return aiuo
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (aiuo *AWSIamUpdateOne) SetNillableUID(s *string) *AWSIamUpdateOne {
	if s != nil {
		aiuo.SetUID(*s)
	}
	return aiuo
}

// SetAccountID sets the "account_id" field.
func (aiuo *AWSIamUpdateOne) SetAccountID(s string) *AWSIamUpdateOne {
	aiuo.mutation.SetAccountID(s)
	return aiuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (aiuo *AWSIamUpdateOne) SetNillableAccountID(s *string) *AWSIamUpdateOne {
	if s != nil {
		aiuo.SetAccountID(*s)
	}
	return aiuo
}

// SetIamName sets the "iam_name" field.
func (aiuo *AWSIamUpdateOne) SetIamName(s string) *AWSIamUpdateOne {
	aiuo.mutation.SetIamName(s)
	return aiuo
}

// SetNillableIamName sets the "iam_name" field if the given value is not nil.
func (aiuo *AWSIamUpdateOne) SetNillableIamName(s *string) *AWSIamUpdateOne {
	if s != nil {
		aiuo.SetIamName(*s)
	}
	return aiuo
}

// SetAccessKey sets the "access_key" field.
func (aiuo *AWSIamUpdateOne) SetAccessKey(s string) *AWSIamUpdateOne {
	aiuo.mutation.SetAccessKey(s)
	return aiuo
}

// SetNillableAccessKey sets the "access_key" field if the given value is not nil.
func (aiuo *AWSIamUpdateOne) SetNillableAccessKey(s *string) *AWSIamUpdateOne {
	if s != nil {
		aiuo.SetAccessKey(*s)
	}
	return aiuo
}

// SetSecretKey sets the "secret_key" field.
func (aiuo *AWSIamUpdateOne) SetSecretKey(s string) *AWSIamUpdateOne {
	aiuo.mutation.SetSecretKey(s)
	return aiuo
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (aiuo *AWSIamUpdateOne) SetNillableSecretKey(s *string) *AWSIamUpdateOne {
	if s != nil {
		aiuo.SetSecretKey(*s)
	}
	return aiuo
}

// SetCreatedAt sets the "created_at" field.
func (aiuo *AWSIamUpdateOne) SetCreatedAt(t time.Time) *AWSIamUpdateOne {
	aiuo.mutation.SetCreatedAt(t)
	return aiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aiuo *AWSIamUpdateOne) SetNillableCreatedAt(t *time.Time) *AWSIamUpdateOne {
	if t != nil {
		aiuo.SetCreatedAt(*t)
	}
	return aiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (aiuo *AWSIamUpdateOne) SetUpdatedAt(t time.Time) *AWSIamUpdateOne {
	aiuo.mutation.SetUpdatedAt(t)
	return aiuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aiuo *AWSIamUpdateOne) SetNillableUpdatedAt(t *time.Time) *AWSIamUpdateOne {
	if t != nil {
		aiuo.SetUpdatedAt(*t)
	}
	return aiuo
}

// Mutation returns the AWSIamMutation object of the builder.
func (aiuo *AWSIamUpdateOne) Mutation() *AWSIamMutation {
	return aiuo.mutation
}

// Where appends a list predicates to the AWSIamUpdate builder.
func (aiuo *AWSIamUpdateOne) Where(ps ...predicate.Aws_iam) *AWSIamUpdateOne {
	aiuo.mutation.Where(ps...)
	return aiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aiuo *AWSIamUpdateOne) Select(field string, fields ...string) *AWSIamUpdateOne {
	aiuo.fields = append([]string{field}, fields...)
	return aiuo
}

// Save executes the query and returns the updated Aws_iam entity.
func (aiuo *AWSIamUpdateOne) Save(ctx context.Context) (*Aws_iam, error) {
	return withHooks(ctx, aiuo.sqlSave, aiuo.mutation, aiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiuo *AWSIamUpdateOne) SaveX(ctx context.Context) *Aws_iam {
	node, err := aiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aiuo *AWSIamUpdateOne) Exec(ctx context.Context) error {
	_, err := aiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiuo *AWSIamUpdateOne) ExecX(ctx context.Context) {
	if err := aiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aiuo *AWSIamUpdateOne) sqlSave(ctx context.Context) (_node *Aws_iam, err error) {
	_spec := sqlgraph.NewUpdateSpec(aws_iam.Table, aws_iam.Columns, sqlgraph.NewFieldSpec(aws_iam.FieldID, field.TypeInt))
	id, ok := aiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Aws_iam.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, aws_iam.FieldID)
		for _, f := range fields {
			if !aws_iam.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != aws_iam.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiuo.mutation.UID(); ok {
		_spec.SetField(aws_iam.FieldUID, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.AccountID(); ok {
		_spec.SetField(aws_iam.FieldAccountID, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.IamName(); ok {
		_spec.SetField(aws_iam.FieldIamName, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.AccessKey(); ok {
		_spec.SetField(aws_iam.FieldAccessKey, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.SecretKey(); ok {
		_spec.SetField(aws_iam.FieldSecretKey, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.CreatedAt(); ok {
		_spec.SetField(aws_iam.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := aiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(aws_iam.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Aws_iam{config: aiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{aws_iam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aiuo.mutation.done = true
	return _node, nil
}
