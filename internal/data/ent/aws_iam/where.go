// Code generated by ent, DO NOT EDIT.

package aws_iam

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/golifez/zkit/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldLTE(FieldID, id))
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEQ(FieldUID, v))
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEQ(FieldAccountID, v))
}

// IamName applies equality check predicate on the "iam_name" field. It's identical to IamNameEQ.
func IamName(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEQ(FieldIamName, v))
}

// AccessKey applies equality check predicate on the "access_key" field. It's identical to AccessKeyEQ.
func AccessKey(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEQ(FieldAccessKey, v))
}

// SecretKey applies equality check predicate on the "secret_key" field. It's identical to SecretKeyEQ.
func SecretKey(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEQ(FieldSecretKey, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEQ(FieldUpdatedAt, v))
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEQ(FieldUID, v))
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldNEQ(FieldUID, v))
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldIn(FieldUID, vs...))
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldNotIn(FieldUID, vs...))
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldGT(FieldUID, v))
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldGTE(FieldUID, v))
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldLT(FieldUID, v))
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldLTE(FieldUID, v))
}

// UIDContains applies the Contains predicate on the "uid" field.
func UIDContains(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldContains(FieldUID, v))
}

// UIDHasPrefix applies the HasPrefix predicate on the "uid" field.
func UIDHasPrefix(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldHasPrefix(FieldUID, v))
}

// UIDHasSuffix applies the HasSuffix predicate on the "uid" field.
func UIDHasSuffix(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldHasSuffix(FieldUID, v))
}

// UIDEqualFold applies the EqualFold predicate on the "uid" field.
func UIDEqualFold(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEqualFold(FieldUID, v))
}

// UIDContainsFold applies the ContainsFold predicate on the "uid" field.
func UIDContainsFold(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldContainsFold(FieldUID, v))
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEQ(FieldAccountID, v))
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldNEQ(FieldAccountID, v))
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldIn(FieldAccountID, vs...))
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldNotIn(FieldAccountID, vs...))
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldGT(FieldAccountID, v))
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldGTE(FieldAccountID, v))
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldLT(FieldAccountID, v))
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldLTE(FieldAccountID, v))
}

// AccountIDContains applies the Contains predicate on the "account_id" field.
func AccountIDContains(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldContains(FieldAccountID, v))
}

// AccountIDHasPrefix applies the HasPrefix predicate on the "account_id" field.
func AccountIDHasPrefix(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldHasPrefix(FieldAccountID, v))
}

// AccountIDHasSuffix applies the HasSuffix predicate on the "account_id" field.
func AccountIDHasSuffix(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldHasSuffix(FieldAccountID, v))
}

// AccountIDEqualFold applies the EqualFold predicate on the "account_id" field.
func AccountIDEqualFold(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEqualFold(FieldAccountID, v))
}

// AccountIDContainsFold applies the ContainsFold predicate on the "account_id" field.
func AccountIDContainsFold(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldContainsFold(FieldAccountID, v))
}

// IamNameEQ applies the EQ predicate on the "iam_name" field.
func IamNameEQ(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEQ(FieldIamName, v))
}

// IamNameNEQ applies the NEQ predicate on the "iam_name" field.
func IamNameNEQ(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldNEQ(FieldIamName, v))
}

// IamNameIn applies the In predicate on the "iam_name" field.
func IamNameIn(vs ...string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldIn(FieldIamName, vs...))
}

// IamNameNotIn applies the NotIn predicate on the "iam_name" field.
func IamNameNotIn(vs ...string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldNotIn(FieldIamName, vs...))
}

// IamNameGT applies the GT predicate on the "iam_name" field.
func IamNameGT(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldGT(FieldIamName, v))
}

// IamNameGTE applies the GTE predicate on the "iam_name" field.
func IamNameGTE(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldGTE(FieldIamName, v))
}

// IamNameLT applies the LT predicate on the "iam_name" field.
func IamNameLT(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldLT(FieldIamName, v))
}

// IamNameLTE applies the LTE predicate on the "iam_name" field.
func IamNameLTE(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldLTE(FieldIamName, v))
}

// IamNameContains applies the Contains predicate on the "iam_name" field.
func IamNameContains(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldContains(FieldIamName, v))
}

// IamNameHasPrefix applies the HasPrefix predicate on the "iam_name" field.
func IamNameHasPrefix(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldHasPrefix(FieldIamName, v))
}

// IamNameHasSuffix applies the HasSuffix predicate on the "iam_name" field.
func IamNameHasSuffix(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldHasSuffix(FieldIamName, v))
}

// IamNameEqualFold applies the EqualFold predicate on the "iam_name" field.
func IamNameEqualFold(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEqualFold(FieldIamName, v))
}

// IamNameContainsFold applies the ContainsFold predicate on the "iam_name" field.
func IamNameContainsFold(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldContainsFold(FieldIamName, v))
}

// AccessKeyEQ applies the EQ predicate on the "access_key" field.
func AccessKeyEQ(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEQ(FieldAccessKey, v))
}

// AccessKeyNEQ applies the NEQ predicate on the "access_key" field.
func AccessKeyNEQ(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldNEQ(FieldAccessKey, v))
}

// AccessKeyIn applies the In predicate on the "access_key" field.
func AccessKeyIn(vs ...string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldIn(FieldAccessKey, vs...))
}

// AccessKeyNotIn applies the NotIn predicate on the "access_key" field.
func AccessKeyNotIn(vs ...string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldNotIn(FieldAccessKey, vs...))
}

// AccessKeyGT applies the GT predicate on the "access_key" field.
func AccessKeyGT(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldGT(FieldAccessKey, v))
}

// AccessKeyGTE applies the GTE predicate on the "access_key" field.
func AccessKeyGTE(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldGTE(FieldAccessKey, v))
}

// AccessKeyLT applies the LT predicate on the "access_key" field.
func AccessKeyLT(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldLT(FieldAccessKey, v))
}

// AccessKeyLTE applies the LTE predicate on the "access_key" field.
func AccessKeyLTE(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldLTE(FieldAccessKey, v))
}

// AccessKeyContains applies the Contains predicate on the "access_key" field.
func AccessKeyContains(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldContains(FieldAccessKey, v))
}

// AccessKeyHasPrefix applies the HasPrefix predicate on the "access_key" field.
func AccessKeyHasPrefix(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldHasPrefix(FieldAccessKey, v))
}

// AccessKeyHasSuffix applies the HasSuffix predicate on the "access_key" field.
func AccessKeyHasSuffix(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldHasSuffix(FieldAccessKey, v))
}

// AccessKeyEqualFold applies the EqualFold predicate on the "access_key" field.
func AccessKeyEqualFold(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEqualFold(FieldAccessKey, v))
}

// AccessKeyContainsFold applies the ContainsFold predicate on the "access_key" field.
func AccessKeyContainsFold(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldContainsFold(FieldAccessKey, v))
}

// SecretKeyEQ applies the EQ predicate on the "secret_key" field.
func SecretKeyEQ(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEQ(FieldSecretKey, v))
}

// SecretKeyNEQ applies the NEQ predicate on the "secret_key" field.
func SecretKeyNEQ(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldNEQ(FieldSecretKey, v))
}

// SecretKeyIn applies the In predicate on the "secret_key" field.
func SecretKeyIn(vs ...string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldIn(FieldSecretKey, vs...))
}

// SecretKeyNotIn applies the NotIn predicate on the "secret_key" field.
func SecretKeyNotIn(vs ...string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldNotIn(FieldSecretKey, vs...))
}

// SecretKeyGT applies the GT predicate on the "secret_key" field.
func SecretKeyGT(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldGT(FieldSecretKey, v))
}

// SecretKeyGTE applies the GTE predicate on the "secret_key" field.
func SecretKeyGTE(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldGTE(FieldSecretKey, v))
}

// SecretKeyLT applies the LT predicate on the "secret_key" field.
func SecretKeyLT(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldLT(FieldSecretKey, v))
}

// SecretKeyLTE applies the LTE predicate on the "secret_key" field.
func SecretKeyLTE(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldLTE(FieldSecretKey, v))
}

// SecretKeyContains applies the Contains predicate on the "secret_key" field.
func SecretKeyContains(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldContains(FieldSecretKey, v))
}

// SecretKeyHasPrefix applies the HasPrefix predicate on the "secret_key" field.
func SecretKeyHasPrefix(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldHasPrefix(FieldSecretKey, v))
}

// SecretKeyHasSuffix applies the HasSuffix predicate on the "secret_key" field.
func SecretKeyHasSuffix(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldHasSuffix(FieldSecretKey, v))
}

// SecretKeyEqualFold applies the EqualFold predicate on the "secret_key" field.
func SecretKeyEqualFold(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEqualFold(FieldSecretKey, v))
}

// SecretKeyContainsFold applies the ContainsFold predicate on the "secret_key" field.
func SecretKeyContainsFold(v string) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldContainsFold(FieldSecretKey, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Aws_iam {
	return predicate.Aws_iam(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Aws_iam) predicate.Aws_iam {
	return predicate.Aws_iam(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Aws_iam) predicate.Aws_iam {
	return predicate.Aws_iam(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Aws_iam) predicate.Aws_iam {
	return predicate.Aws_iam(sql.NotPredicates(p))
}
